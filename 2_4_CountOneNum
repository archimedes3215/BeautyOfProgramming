public class Count1Demo {
    public int getLenOfNum(int num) {
        int len = 0;
        while (num != 0) {
            len++;
            num /= 10;
        }
        return len;
    }

    public int powerBaseOf10(int base) {
        return (int) Math.pow(10, base);
    }

    public int count1(int num) {
        if (num < 1) return 0;
        int len = getLenOfNum(num);
        if (len == 1) return 1;
        int tmp1 = powerBaseOf10(len - 1);
        int first = num / tmp1;
        int firstOneNum = first == 1 ? num % tmp1 + 1 : tmp1;
        int otherOneNum = first * (len - 1) * (tmp1 / 10);
        return firstOneNum + otherOneNum + count1(num % tmp1);
    }

    public static void main(String[] args) {
        Count1Demo count1Demo = new Count1Demo();
        System.out.println(count1Demo.count1(1234));
        System.out.println(count1Demo.countOneNum(1234));
    }

    public int countOneNum(int num) {
        //用非递归的方法实现...high + cur +low组成，eg:1234，当cur为十位，high->12,cur->3,low->4
        int iCount = 0;
        int factor = 1;
        while (num >= factor) {   //factor代表位数...
            int high = num / (factor * 10);   //high 代表高位...
            int cur = (num / factor) % 10;  //  cur代表需要计算1的位数...
            int low = num % factor;
            switch (cur) {
                case 0:     //=0的情况
                    iCount += high * factor;
                    break;
                case 1:     //=1的情况
                    iCount += (high * factor + (low + 1));
                    break;
                default:    //>1的情况
                    iCount += (high + 1) * factor;
                    break;
            }
            factor*=10;
        }
        return iCount;
    }
}
